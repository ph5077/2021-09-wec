git usage

  1.0. Prepare user config file, env setting
      ~/.gitconfig                                ## config file, user info, editor, cmd alias 
      .gitignore                                  ## files should not be tracked, each pjt can have its own setting
                                                  ## better include .gitignore into the repo

      > git --version                             ## Make sure git is available
      git version 1.7.1
      > cd                                        ## home dir
      > cp /homec07/users/jyliu4/.gitconfig .     ## user info, command alias
      > gvim .gitconfig                           ## your user and email, or preferred editor for commit message

  2.0. Make pjt ready for git
  2.1. New or goto existing, un-git, working dir
      > cd test-dir
      > cp ~/.gitignore .                         ## Every working dir(pjt) can have its own .gitignore
      > git init                                  ## Initialized empty Git repository, .git dir created
  2.2. CLONE
      > cd test-dir
      > git clone ~ibis5/Verilog_model/Bolero.git .
      > git remote -v                             ## list all remotes

  3.0. DIR and Working ZONEs
      ---- Local Working Dir                      ## the dir your are working on
      ---- Local Staging Area                     ## intermediate zone, files ready to be committed(check in), added by cmd "git add"
      ---- Local Git Repo
      ---- Remote Git Repo

  4.0. Daily Commands 
      > git st                                    ## status
      > git add .                                 ## add all tracked files into "Stage Area"
      > git ci                                    ## commit, check in, bring-up editor for checkin message
      > git ci -m "Initial Setup"                 ## commit with message
      > git commit --amend                        ## modify the last commit message
      > git commit --allow-empty                  ## in case no change, nothing to commit, only for record 
      > git tag "R0.30"                           ## new tag for latest commit 

  5.0. Log
      > git log -1                                ## show last commit
      > git log > gitlog                          ## show all commit to file gitlog
      > git log --pretty=oneline                  ## show one line per log
      > git log --decorate --oneline              ## same as above, +tags as well
      > git log --grep=MODELSIM                   ## to search the whole log with keyword "MODELSIM"
      > git log since="2019-07-01"                ## log since 0701
      > git log R1.0..HEAD                        ## log after tag R1.0
      > git log R1.0..R1.2                        ## log from R1.0 to R1.2
      > git log b601852..HEAD                     ## using SH-ID

  6.0. Tag
      > git tag R1.0 -a -m "Release 1.0" sha-id   ## new tag to ver sha-id
      > git tag R1.0                              ## new tag to current commit 
      > git tag -n                                ## show all tags
      > git show R1.0  --quiet                    ## show tag R1.0 w/o details
      > git tag -d R1.0                           ## delete tag R1.0
        
  7.0. Branch
      > git branch                                ## list all branches
      > git checkout R1.0 -b myBranch             ## new branch, myBranch, checkout from tag R1.0
      > git checkout -b NEW b601852               ## create a new branch, NEW, from b601852, and check it out 
      > git branch -d NEW                         ## delete a branch, NEW

  8.0. DIFF
      > git diff shid1 shid2 file-name            ## show diff btw ver for file-name
      > git show shid1:file-name                  ## show content of file-name in ver shid1
      > git diff --cached                         ## show diff btw stage and HEAD
      > git diff file-name                        ## show diff btw working and stage area

      > git difftool shid1 shid2 file-name        ## Using gvimdiff as tool of diff, see ~/.gitconfig
                                                  ## In Vim, using "<ctrl-w> J, <ctrl-w> H" to change the layout, horizontal or vertical
                                                  ## Or, ":windo wincmd K" ==> to horizontal, ":windo wincmd H" ==> to vertical

  9.0. Clone remote repo into your local dir
      ## Make sure steps in "1.0" done.
      ##
      > cd ~/test/                                ## clone repo into local dir
      > git clone ~ibis5/Verilog_model/Cornucopia.git . 

      ## Switch btw vers 
      ##
      >git lod -10                                ## show last 10 commit
        ad10bc2 (HEAD, origin/master, origin/HEAD, master) 2019-0926 CR005_Denis_CTmode DONE CHANGE: ct.v
        4750d04 2019-0925 CT mode, working on ct.v CHANGE: ddrif.ten
        6522cb0 2019-0924 CT mode, working on ct.v CHANGE: ddrif.ten
        b3189e6 2019-0923 4.30 CT mode, ct.v working CHANGE: NA
        2241ccc 2019-0918 MRS to clear mr3.gdm(CR004), new case gdm_1 CHANGE: p_tdodtloff_mrs
        d32aaee 2019-0917 MRS to clear mr3.gdm, debuging case gdm CHANGE: mr3.gdm
        03acba8 2019-0916 DOC CHANGE: NA
        8ee8c93 2019-0911 DOC CHANGE: NA
        1da91b3 2019-0910 Added TRCD_AL, default 0 CHANGE: ap_trcd_a2rw
        e8275e8 2019-0909 DOC CHANGE: NA

      ## CHECK OUT using SHA ID
      > git co e8275e8                            ## switch to ver 2019-0909                      
      .....
      > git co master                             ## switch back

      ## CHECK OUT using tag
      > git tag -n                                ## list tag
      ....................
      R1.5            package global var removed, NC run Done
      R2.0.0          Release 2.0.0, concurrent assertion removed, for [NC/VCS/MS Intel FPGA]
      R2.0.1          Release 2.0.1, code cleaning
      > git stash                                 ## OPTIONAL push current change temporarily
      > git co R2.0.1                             ## switch to R2.0.1
      ...................
      > git co master                             ## switch back
      > git stash pop                             ## OPTIONAL pop current change back
      
      ## CHECKOUT using branch
      > git checkout -b NEW e8275e8               ## create a new branch, NEW, from e8275, and check it out 
      .....
      > git co master                             ## switch back

      ## to sync latest changes with the repo
      ##
      > git pull                                  ## download changes and directly merge into HEAD
      > git push                                  ## publish local change on a remote
      > git push --tags                           ## publish your tags

      ## to get branch of the remote repo
      ##
      > git co master                             ## make sure clean status
      > git fetch
      > git co multi_inst                         ## Done

      > git remote show origin                    ## display url or remote repo
      > git ls-remote origin                      ## list SHA ID of remote repo
      > git ls-files                              ## list all tracked files

  Reference:
      0. ~ibis5/Verilog_model/README.txt 
      1. free e-book on official site
          https://git-scm.com/book/zh-tw/v2
      2. docs on Linux
          /usr/share/doc/git-1.7.1/gittutorial.html
          /usr/share/doc/git-1.7.1/everyday.html
      3. Tutorials
          https://www.atlassian.com/git/tutorials/what-is-version-control
      4. Git in 30 days, in Chinese  
          https://ithelp.ithome.com.tw/articles/10132053
      5. Youtube
          Git Tutorials, Corey Schafer
